**Open cmd in the mongoDB file and write 

mongoimport --db population --collection zipcodes --file C:\data\db\zips.json

*  C:\data\db is the path in which the zips.json is present

*  use population

*  show collections

*  db.zipcodes.find().pretty()  ----To show all the content of zipcodes
-----------------------------------------------------------------------------------------------------

Atlanta Population

1. use db.zipcodes.find() to filter results to only the results where city is ATLANTA and state is GA.

   ** db.zipcodes.find({city : "ATLANTA" , state : "GA"}).pretty()

2. use db.zipcodes.aggregate with $match to do the same as above.

   ** db.zipcodes.aggregate([
      { $match : { "city" : "ATLANTA" , "state" : "GA"}}
      ]);

   OR

   ** db.zipcodes.aggregate([
      {$match :
      { 
      $and : [
      {
      "city" : "ATLANTA" , "state" : "GA"
      }]
      }}
      ]);

3. use $group to count the number of zip codes in Atlanta.

   ** db.zipcodes.aggregate([
       { $match : { "city" : "ATLANTA"}},
         {
           $group : {
              _id : null,
              count: {
                   $sum : 1
                     }}
         }
       ]);

4. use $group to find the total population in Atlanta.

   ** db.zipcodes.aggregate([
        { $match : { "city" : "ATLANTA"}},
          {
           $group : {
              _id : null,
              count: {
                   $sum : "$pop"
                     }}
         }
       ]);



-----------------------------------------------------------------------------------------------------------------

Populations By State

1. use aggregate to calculate the total population for each state

   ** db.zipcodes.aggregate( [
        { $group: 
           { _id: "$state", total_Pop: { $sum: "$pop" } 
            } }
        ])

2. sort the results by population, highest first

  ** db.zipcodes.aggregate([
       {$sort: {pop:-1}
      }
      ])

3. limit the results to just the first 3 results. What are the top 3 states in population?

  **  db.zipcodes.find({}).sort({"pop":-1}).limit(3)


--------------------------------------------------------------------------------------------------------------------

Populations by City

1. use aggregate to calculate the total population for each city (you have to use city/state combination). 
   You can use a combination for the _id of the $group: { city: '$city', state: '$state' }
    
   ** db.zipcodes.aggregate([ 
      {$group:
          {
             _id:{state:"$state",city:"$city"},
             total:{$sum:"$pop"}}
          }
       ])

2. sort the results by population, highest first

    ** db.zipcodes.aggregate([ 
       {$group:
          {
             _id:{state:"$state",city:"$city"},
             total:{$sum:"$pop"}}
          },{$sort:{"total":-1}}
       ])


3. limit the results to just the first 3 results. What are the top 3 cities in population?
  
    ** db.zipcodes.aggregate([    
       {$group:       
          {         
             _id:{state:"$state",city:"$city"},          
             total:{$sum:"$pop"}}       
          },{$sort:{"total":-1}}, {$limit :3}
       ])

4. What are the top 3 cities in population in Texas?

    ** db.zipcodes.aggregate([
       { $group : {_id:{state:"TEXAS", city:"$city"}, total:{$sum:"$pop"}}},
       {$sort:{"total":-1}}, {$limit :3}
       ])
  

---------------------------------------------------------------------------------------------------------------------

Bonus

1. Write a query to get the average city population for each state.

  ** db.zipcodes.aggregate([
    {$group: {_id: {state: "$state", city: "$city"}, average: {$avg: "$pop"}}}
    ])

2. What are the top 3 states in terms of average city population?

   ** db.zipcodes.aggregate([
    {$group: {_id: {state: "$state", city: "$city"}, average: {$avg: "$pop"}}},
    {$sort:{"average":-1}}, {$limit :3}
    ])


----------------------------------------------------------------------------------------------------------------------






















   